object SyntAnal28: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Variable'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String 2'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String regex'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 7768644
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment multiline'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s)^=(begin|pod)\b.+?^=(end|cut)\b[^\n]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Variable'
      StyleName = 'Variable'
      TokenType = 2
      Expression = '\$\w+::\w+ |'#13#10'[\$\#%@]+\w+'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String Regex subst'
      StyleName = 'String regex'
      TokenType = 4
      Expression = 's/ (\\/|.)*? / (\\/|.)*? / \w* '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String Regex'
      StyleName = 'String regex'
      TokenType = 4
      Expression = '\w* / (\\/|.)+? (/|$) \w* '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\\\|\\"|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String 2'
      StyleName = 'String 2'
      TokenType = 9
      Expression = #39'.*?('#39'|$)'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:=<>\+\-\?!@&%\|~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__DATA__'
            '__END__'
            '__FILE__'
            '__LINE__'
            '__PACKAGE__'
            'abs'
            'accept'
            'alarm'
            'and'
            'atan2'
            'AUTOLOAD'
            'BEGIN'
            'bind'
            'binmode'
            'bless'
            'caller'
            'chdir'
            'CHECK'
            'chmod'
            'chomp'
            'chop'
            'chown'
            'chr'
            'chroot'
            'close'
            'closedir'
            'cmp'
            'connect'
            'continue'
            'CORE'
            'cos'
            'crypt'
            'dbmclose'
            'dbmopen'
            'define'
            'defined'
            'delete'
            'DESTROY'
            'die'
            'do'
            'dump'
            'each'
            'else'
            'elsif'
            'END'
            'endgrent'
            'endhostent'
            'endnetent'
            'endprotoent'
            'endpwent'
            'endservent'
            'eof'
            'EQ'
            'eval'
            'exec'
            'exists'
            'exit'
            'exp'
            'fcntl'
            'fileno'
            'flock'
            'for'
            'foreach'
            'fork'
            'format'
            'formline'
            'GE'
            'getc'
            'getgrent'
            'getgrgid'
            'getgrnam'
            'gethostbyaddr'
            'gethostbyname'
            'gethostent'
            'getlogin'
            'getnetbyaddr'
            'getnetbyname'
            'getnetent'
            'getpeername'
            'getpgrp'
            'getppid'
            'getpriority'
            'getprotobyname'
            'getprotobynumber'
            'getprotoent'
            'getpwent'
            'getpwnam'
            'getpwuid'
            'getservbyname'
            'getservbyport'
            'getservent'
            'getsockname'
            'getsockopt'
            'glob'
            'gmtime'
            'goto'
            'grep'
            'GT'
            'hex'
            'if'
            'index'
            'INIT'
            'int'
            'ioctl'
            'join'
            'keys'
            'kill'
            'last'
            'lc'
            'lcfirst'
            'LE'
            'length'
            'link'
            'listen'
            'local'
            'localtime'
            'lock'
            'log'
            'lstat'
            'LT'
            'm'
            'map'
            'mkdir'
            'msgctl'
            'msgget'
            'msgrcv'
            'msgsnd'
            'my'
            'NE'
            'next'
            'no'
            'not'
            'NULL'
            'oct'
            'open'
            'opendir'
            'or'
            'ord'
            'our'
            'pack'
            'package'
            'pipe'
            'pop'
            'pos'
            'print'
            'printf'
            'prototype'
            'push'
            'q'
            'qq'
            'qr'
            'qu'
            'quotemeta'
            'qw'
            'qx'
            'rand'
            'read'
            'readdir'
            'readline'
            'readlink'
            'readpipe'
            'recv'
            'redo'
            'ref'
            'rename'
            'require'
            'reset'
            'return'
            'reverse'
            'rewinddir'
            'rindex'
            'rmdir'
            's'
            'scalar'
            'seek'
            'seekdir'
            'select'
            'semctl'
            'semget'
            'semop'
            'send'
            'setgrent'
            'sethostent'
            'setnetent'
            'setpgrp'
            'setpriority'
            'setprotoent'
            'setpwent'
            'setservent'
            'setsockopt'
            'shift'
            'shmctl'
            'shmget'
            'shmread'
            'shmwrite'
            'shutdown'
            'sin'
            'sleep'
            'socket'
            'socketpair'
            'sort'
            'splice'
            'split'
            'sprintf'
            'sqrt'
            'srand'
            'stat'
            'study'
            'sub'
            'substr'
            'symlink'
            'syscall'
            'sysopen'
            'sysread'
            'sysseek'
            'system'
            'syswrite'
            'tell'
            'telldir'
            'tie'
            'tied'
            'time'
            'times'
            'tr'
            'truncate'
            'uc'
            'ucfirst'
            'umask'
            'undef'
            'unless'
            'unlink'
            'unpack'
            'unshift'
            'untie'
            'until'
            'use'
            'utime'
            'values'
            'vec'
            'wait'
            'waitpid'
            'wantarray'
            'warn'
            'while'
            'write'
            'x'
            'xor'
            'y')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sub'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'sub')
          TokenTypes = 1028
        end>
      NameFmt = 'sub %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = 'sub %s-1'
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sub unnamed'
      ConditionList = <
        item
          TagList.Strings = (
            'sub')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '=')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      NameFmt = 'sub %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '...'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#!/bin/perl'
    'require "cgi-lib.pl";   '
    'use sigtrap;'
    'do '#39'envars.pl'#39';'
    ''
    '=begin name'
    'dd'
    '=end name'
    ''
    '$re = m/text/i; #Usual regex'
    '$sLine =~ s/x/y/; #Subst regex'
    '$sLine =~ s/x\/y/y\*z/g; #Subst too'
    ''
    '20+20.30'
    '$MyVar or $MyLib::MyVar'
    'or @MyArray or $#MyArray or %MyHash'
    ''
    'sub outer {'
    '   my $inner = sub {'
    '      $foo;'
    '   };'
    '   $inner->();'
    '}'
    ''
    'sub MyOpen(*$) {  # debug'
    '  my ($sKey);'
    '}  '
    ''
    'sub WriteBack() {'
    '        while ($_ ne "fred")    {'
    '                sleep 5;'
    '        }'
    '}'
    ''
    'sub Some {'
    '  print "Test";'
    '  while (test) {'
    '    print "TT";'
    '  }  '
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'String 2'
    'Comment shebang')
  Extentions = 'pl pm cgi pod plx'
  LexerName = 'Perl'
  Notes.Strings = (
    'Fixes by Alexey (CudaText)')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
