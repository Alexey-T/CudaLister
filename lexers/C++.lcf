object SyntAnal7: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Default'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id special'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Current block BG'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftBackGround
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end
    item
      DisplayName = 'Asm BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 14938312
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Generic param'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|\\\\|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String raw'
      StyleName = 'String'
      TokenType = 4
      Expression = 'R"\( .+? \)" |'#13#10'R"(.+?)\( .+? \)\1"'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      TokenType = 7
      Expression = '\b(catch|else|for|if|switch|while)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '\~?[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f'#39']+ |'#13#10'0b[01'#39']+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '#with exp. dot is optional '#13#10'(\d[\d'#39']* \.)? \d[\d'#39']* e [\+\-]? \' +
        'd[\d'#39']* |'#13#10'#without exp. dot is required'#13#10'\d[\d'#39']* \. \d[\d'#39']*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d'#39']* [ul]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 6
      Expression = '\#[\x20\x09]*\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'GenericParam'
      StyleName = 'Generic param'
      TokenType = 11
      Expression = '<[\w\x20]*?>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ;'
      StyleName = 'Symbol'
      TokenType = 13
      Expression = ';'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ->'
      StyleName = 'Symbol'
      TokenType = 12
      Expression = '\->'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol { }'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ::'
      StyleName = 'Symbol'
      TokenType = 9
      Expression = '::'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ( )'
      StyleName = 'Symbol'
      TokenType = 10
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\[\],]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!\?%\\:]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '_Pragma'
            'and'
            'and_eq'
            'bitand'
            'bitor'
            'break'
            'case'
            'catch'
            'class'
            'compl'
            'continue'
            'default'
            'delete'
            'do'
            'else'
            'enum'
            'for'
            'goto'
            'if'
            'new'
            'noexcept'
            'not'
            'not_eq'
            'operator'
            'or'
            'or_eq'
            'return'
            'struct'
            'switch'
            'throw'
            'try'
            'union'
            'while'
            'xor'
            'xor_eq')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id keywords2'
      StyleName = 'Id special'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__declspec'
            '__restrict'
            '__restrict__'
            'alignas'
            'alignof'
            'const'
            'const_cast'
            'constexpr'
            'decltype'
            'dynamic_cast'
            'explicit'
            'export'
            'extern'
            'friend'
            'inline'
            'mutable'
            'namespace'
            'nullptr'
            'private'
            'protected'
            'public'
            'register'
            'reinterpret_cast'
            'restrict'
            'sizeof'
            'static'
            'static_assert'
            'static_cast'
            'template'
            'this'
            'thread_local'
            'typedef'
            'typeid'
            'typename'
            'using'
            'virtual'
            'volatile')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__asm__'
            '_Bool'
            '_Complex'
            '_Imaginary'
            'asm'
            'auto'
            'bool'
            'char'
            'char16_t'
            'char32_t'
            'double'
            'false'
            'FALSE'
            'float'
            'int'
            'long'
            'NULL'
            'nullptr_t'
            'short'
            'signed'
            'string'
            'true'
            'TRUE'
            'uint16_t'
            'uint32_t'
            'unsigned'
            'vector'
            'void'
            'wchar_t')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2110
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'class %s-1~[{]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func :: ::'
      ConditionList = <
        item
          TagList.Strings = (
            ':'
            '{')
          TokenTypes = 264
        end
        item
          CondType = tcSkip
          TokenTypes = 70
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 1024
        end
        item
          CondType = tcSkip
          TokenTypes = 574
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 1024
        end
        item
          TokenTypes = 4
        end
        item
          TokenTypes = 512
        end
        item
          TokenTypes = 4
        end
        item
          TokenTypes = 512
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-4'
      GroupFmt = '%s0\%s-2'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0...'
      TreeItemImage = 5
      TreeGroupImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func ::'
      ConditionList = <
        item
          TagList.Strings = (
            ':'
            '{')
          TokenTypes = 264
        end
        item
          CondType = tcSkip
          TokenTypes = 70
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 1024
        end
        item
          CondType = tcSkip
          TokenTypes = 574
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 1024
        end
        item
          TokenTypes = 4
        end
        item
          TokenTypes = 512
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-2'
      GroupFmt = '%s0'
      RefToCondEnd = True
      HighlightPos = cpBound
      CancelNextRules = True
      CollapseFmt = '%sz0...'
      TreeItemImage = 5
      TreeGroupImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 70
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 1024
        end
        item
          CondType = tcSkip
          TokenTypes = 574
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 1024
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ';'
            ':'
            '}')
          CondType = tcNotEqual
          TokenTypes = 8456
        end>
      BlockOffset = -1
      BlockEnd = '}'
      NameFmt = '%s-1~[{]1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CancelNextRules = True
      CollapseFmt = '%s-1~[{]1 ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      StyleName = 'Current block BG'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... %ez0'
      IgnoreAsParent = False
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 256
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'struct'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2052
        end
        item
          TagList.Strings = (
            'struct')
          TokenTypes = 4
        end>
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 4
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      Enabled = False
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '/* ... */'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      Enabled = False
      BlockName = 'Block comment'
      StrictParent = True
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <
    item
      DisplayName = 'asm_string'
      Enabled = False
      StyleName = 'Asm BG'
      StartExpression = '\#asm\s*\(\s*"'
      EndExpression = '"\)'
      SyntAnalyzer = SyntAnal2
      IncludeBounds = True
    end>
  SampleText.Strings = (
    '/* Test */'
    '#define max(a, b) ((a > b) ? a : b)'
    '#  asm(" pop ax ");'
    'strcpy(b, "text\"text");'
    'double F = 1e2 + 0.12e+2 + 0xAF;'
    'name = name<CName>'
    ''
    'Id Template::getTemplate(const string &id) const { '
    '  return id;'
    '}'
    ''
    'void CNested1::CMonitor(MonitorIT* part) {'
    '}'
    ''
    'void CNested2::CMonitor::connectMonitorIT(MonitorIT* part) {'
    '  return this;'
    '}'
    ''
    
      'floatFlowInterface* CNested2::CMonitor::getItsFloatFlowInterface' +
      '() {'
    '  return this;'
    '}'
    ''
    ''
    'class CName1 {'
    '}'
    ' '
    'class CName2 : public NameB {'
    '    const int tot;'
    '    unsigned long fib(unsigned long n) {'
    '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
    '    }'
    '}'
    '      '
    'void __fastcall CForm->Button1Click(Sender: TObject) {'
    '  //Test'
    '}'
    ''
    'void main(int argc; char* argv) {'
    '  //Test'
    '}'
    ''
    'typedef struct'
    '{'
    #9'void* FieldValue;'
    #9'int flags;'
    '} Struct1;'
    ''
    'template <name T>'
    'struct somedata<IReader>{'
    '  IReader* val;'
    '  int val2;'
    '};')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Preprocessor'
    'Id keyword'
    'Symbol {}'
    'Symbol ::'
    'Symbol ()'
    'Generic param'
    'Symbol ->'
    'Symbol ;')
  Extentions = 'cpp cxx h hh hpp hxx inl cc cp c++ h++ inl ipp'
  LexerName = 'C++'
  Notes.Strings = (
    'Reworked C++ lexer by Alexey (SynWrite)'
    'Notes:'
    
      '- rules "block comments" disabled, they missed up func rules a l' +
      'ittle'
    '- many token types "symbol ..." is for rules: so rules can skip'
    '  most symbols but not all (; -> {} etc)'
    '   ')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
