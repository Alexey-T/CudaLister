object SyntAnal20: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 12615808
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id class'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'#39
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id raw'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String """'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)"""(\\.|.)*?("""|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String simple'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)"(\\.|.)*?("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String raw #'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s-i)[bc]?r(\#+)".*?("\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String raw 2'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s-i)[bc]?r?"(\\.|.)*?("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = 'b?'#39'\x20'#39' | b?'#39'(\\\S|\S)*?'#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id class'
      StyleName = 'Id class'
      TokenType = 2
      Expression = '(?-i)[A-Z]\w*[a-z]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id raw'
      StyleName = 'Id raw'
      TokenType = 2
      Expression = 'r\#[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*!?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '(\d[\d_]* \. \d[\d_]* (e[\+\-]? [\d_]+)? (f\d*)? \b|'#13#10'\d[\d_]* \' +
        '.(?!\.) [\d_]*) (f\d*)? \b|'#13#10'\d[\d_]* e[\+\-]? [\d_]+ \b|'#13#10'\d[\d' +
        '_]*\.'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '0x[0-9a-f_]+ ([iu]\d*)?\b |'#13#10'0b[01_]+ ([iu]\d*)?\b |'#13#10'0o[0-7_]+ ' +
        '([iu]\d*)?\b |'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]* ([uif]\d*)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '///.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc 2'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s) /\*! (/\* .*? \*/|.)+? \*/'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'#39
      StyleName = 'Id'#39
      TokenType = 8
      Expression = #39'[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 2
      Expression = '\$\x20*\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 9
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol []'
      StyleName = 'Symbol'
      TokenType = 10
      Expression = '[\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ::'
      StyleName = 'Symbol'
      TokenType = 11
      Expression = '::'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ;'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = ';'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '\$\x20*\( | <+ | >+ | : | [\.,@\?!%\+\-\*/=<>&\|\^~\#]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'as'
            'async'
            'await'
            'become'
            'box'
            'break'
            'const'
            'continue'
            'copy'
            'crate'
            'do'
            'drop'
            'dyn'
            'else'
            'enum'
            'extern'
            'false'
            'final'
            'fn'
            'for'
            'if'
            'impl'
            'in'
            'let'
            'loop'
            'macro'
            'macro_rules!'
            'match'
            'mod'
            'move'
            'mut'
            'override'
            'priv'
            'pub'
            'ref'
            'return'
            'self'
            'static'
            'struct'
            'super'
            'trait'
            'true'
            'try'
            'type'
            'typeof'
            'union'
            'unsafe'
            'unsized'
            'use'
            'virtual'
            'where'
            'while'
            'yield')
          TokenTypes = 1028
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'char'
            'expr'
            'f32'
            'f64'
            'false'
            'float'
            'i128'
            'i16'
            'i32'
            'i64'
            'i8'
            'int'
            'isize'
            'str'
            'String'
            'true'
            'u128'
            'u16'
            'u32'
            'u64'
            'u8'
            'uint'
            'usize')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Class/struct'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 302
        end
        item
          TagList.Strings = (
            'enum'
            'impl'
            'mod'
            'struct'
            'trait'
            'union')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s0~s[{]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 3902
        end
        item
          TagList.Strings = (
            'fn')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%sz-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 128
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '/*Cmt'
    'Cmt*/'
    '///Cmt doc'
    '$var, $ var, '#39'id, '#39'\xFF'#39', i32, 0x10_AB, 1.2e+3, r#Foo'
    ''
    'trait Repr {'
    '    fn write_repr(&self, writer: @Writer);'
    '}'
    ''
    'impl EscapedCharWriter for @Writer {'
    '    fn write_escaped_char(&self, ch: char) {'
    '        match ch {'
    '            '#39'\t'#39' => self.write_str("\\t"),'
    '            '#39'\\'#39' => self.write_str("\\\\"),'
    '            '#39'\'#39#39' => self.write_str("\\'#39'"),'
    '            '#39'"'#39' => self.write_str("\\\""),'
    '            '#39'\x20'#39'..'#39'\x7e'#39' => self.write_char(ch),'
    '        }'
    '    }'
    '}'
    ''
    '    #[test]'
    '    fn map() {'
    '        assert_same::<BTreeMap<char, String>>('
    '            "{'
    #39'a'#39': \"Hello\",'
    #39'b'#39': \"Bye\",'
    '        }",'
    '        );'
    '    }')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ;'
    'Symbol {}'
    'Id'#39
    'Symbol ()'
    'Symbol []'
    'Symbol ::')
  Extentions = 'rs rc'
  LexerName = 'Rust'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
  Left = 144
  Top = 184
end
